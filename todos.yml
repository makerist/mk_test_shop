docker:
  app:
    example-app-requirements:
      - user with session handling (sign up / login)
      - product with new/edit/show/index
      - cache product's index entries
      - (a cart / list where an user can add a product - for sql write simulation)
      - one redis instance for sessions
      - one redis instance for caching
      - postgresql instance
    dockerfile:
      - multistage
      - alpine
    stackfile: #compose-file.yml
      - services # app architecture
      - volumes  # persistence
      - secrets  # credentials

  cluster:
    vm-provider: 'aws ?'
    master: 3
    worker: 4 # find out best fit
    portainer: investigate setup and functionality
    docker-swarm:
      - swarm init
      - join masters
      - join workers
      - rotate join tokens
      - lock cluster
      - docker secrets
      - volumes for persistence; container wide

  deployment:
    private-registry:
      dtr: # Docker trusted registry - find equivalent for docker ce
        aws:
          - test AWS Elastic Container Registry
          steps:
            - aws ecr get-login --no-include-email
              # paste the output to the console again to login docker to the new registry
    ci-integration:
      - build images on commit
      - deploy after new valid image
    rollback:
    scaling:
      services:
        manually: change replicas number and docker stack deploy
        automatically: ???
      workers:
        - unlock cluster
        - setup node
        - join worker
        - lock cluster
